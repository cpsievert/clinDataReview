% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/barplotMonitoring.R
\name{barplotMonitoring}
\alias{barplotMonitoring}
\title{Barplot interactive plot.}
\usage{
barplotMonitoring(
  data,
  xVar,
  yVar,
  xLab = getLabelVar(xVar, labelVars = labelVars),
  yLab = getLabelVar(yVar, labelVars = labelVars),
  aesPointVar = list(),
  aesLineVar = list(),
  aesLab,
  xTrans = "identity",
  yTrans = "identity",
  xPars = list(),
  yPars = list(),
  yLim = NULL,
  xLim = NULL,
  titleExtra = NULL,
  title = paste(paste(yLab, "vs", xLab, titleExtra), collapse = "<br>"),
  facetPars = list(),
  facetType = c("wrap", "grid"),
  themePars = list(legend.position = "bottom"),
  refLinePars = NULL,
  labelVars = NULL,
  width = NULL,
  height = NULL,
  hoverVar = unique(c(xVar, yVar, unlist(c(aesPointVar, aesLineVar)))),
  hoverLab = getLabelVar(hoverVar, labelVars = labelVars),
  pathVar = NULL,
  table = FALSE,
  tableVars = unique(c(xVar, yVar, unlist(c(aesPointVar, aesLineVar)))),
  tableLab = getLabelVar(tableVars, labelVars = labelVars),
  tableButton = TRUE,
  tablePars = list(),
  id = paste0("plotMonitoring", sample.int(n = 1000, size = 1)),
  verbose = FALSE
)
}
\arguments{
\item{data}{Data.frame with data.}

\item{xVar}{String with column of \code{data} containing x-variable.}

\item{yVar}{String with column of \code{data} containing y-variable.}

\item{yLim}{Numeric vector of length 2 with limits for the x/y axes.}

\item{xLim}{Numeric vector of length 2 with limits for the x/y axes.}

\item{titleExtra}{String with extra title for the plot (appended after \code{title}).}

\item{title}{String with title for the plot.}

\item{facetPars}{List with facetting parameters, passed to the facetting function.}

\item{refLinePars}{(optional) Nested list, with parameters for each reference line(s).
Each sublist (a.k.a reference line) contains:
\itemize{
\item{aesthetic value(s) or variable(s) for the lines
(in this case column names of \code{data}) for reference lines.
The line position is controlled by the aesthetics supported in
\code{\link[ggplot2]{geom_vline}}, \code{\link[ggplot2]{geom_hline}} 
and \code{\link[ggplot2]{geom_abline}}.
}
\item{'label': }{(optional) Logical specifying if the line
should be annotated (\code{FALSE} to not annotate the line)
or string with annotation label. By default, the value
of the position of the horizontal/vertical line or the equation
of the diagonal line is displayed.
}
}}

\item{labelVars}{Named character vector containing variable labels,
used by default for all labels in the plot.}

\item{width}{Width/height of the plot in pixels.}

\item{height}{Width/height of the plot in pixels.}

\item{hoverVar}{Character vector with variables to be displayed in the hover,
by default \code{xVar}, \code{yVar} and any aesthetic variables.}

\item{hoverLab}{Named character vector with labels for \code{hoverVar}.}

\item{pathVar}{String with variable of \code{data} containing path
to a subject-specific report (e.g. patient profiles).
The report should be unique by element of \code{idVar}.
This report will be:p
\itemize{
\item{downloaded if the user clicks on the 'p' (a.k.a 'profile') key
when hovering on a point of the plot}
\item{opened in a browser via hyperlink in the \code{idVar} of the table 
column (if specified via \code{tableVars})}
}}

\item{table}{Logical, if TRUE (FALSE by default)
returns also a \code{datatable} containing the plot data.}

\item{tableVars}{Character vector with variables to be included 
in the table; and associated labels.}

\item{tableLab}{Character vector with variables to be included 
in the table; and associated labels.}

\item{tableButton}{Logical, if TRUE (by default)
the table is included within an HTML button.}

\item{tablePars}{List with parameters passed to the
\code{\link[glpgUtilityFct]{toDTGLPG}} function.}

\item{id}{String with general id for the plot:
\itemize{
\item{'id' is used as \code{group} for the \code{\link[crosstalk]{SharedData}}}
\item{'button:[id]' is used as button ID if \code{table} is TRUE}
}
If not specified, a random id, as 'plotMonitoring[X]' is used.}
}
\value{
If a \code{table} is requested:
\itemize{
\item{a list with the 'plot' (\code{\link[plotly]{plotly}} object) and 'table'
(\code{\link[DT]{datatable}} object with extra class: \code{medicalMonitoringTable})}
\item{\code{\link[plotly]{plotly}} object}
}
}
\description{
Note: the table and plot are not (yet) linked.
}
\examples{
library(glpgUtilityFct)

data(SDTMDataPelican)
data(labelVarsSDTMPelican)

dataAE <- SDTMDataPelican$AE
dataDM <- SDTMDataPelican$DM
labelVars <- labelVarsSDTMPelican

## example of basic barplot:

# treemap takes as input table with counts
library(inTextSummaryTable)

# total counts: Safety Analysis Set (patients with start date for the first treatment)
dataTotal <- subset(dataDM, RFXSTDTC != "")

# compute adverse event table
tableAE <- getSummaryStatisticsTable(
		
	data = dataAE,
	rowVar = c("AESOC", "AEDECOD"),
	dataTotal = dataTotal,
	rowOrder = "total",
	labelVars = labelVars,
	stats = getStats("count"),
	
	# plotly treemap requires records (rows) for each group
	rowVarTotalInclude = "AEDECOD",
	outputType = "data.frame"

)

dataPlot <- subset(dataPlot, AEDECOD != "Total")

dataPlot$n <- as.numeric(dataPlot$n)

# create plot
barplotMonitoring(
	data = dataPlot,
	xVar = "AEDECOD", 
	yVar = "n", yLab = "Number of patients with adverse events",
	labelVars = labelVars
)
}
\author{
Laure Cougnaud
}
