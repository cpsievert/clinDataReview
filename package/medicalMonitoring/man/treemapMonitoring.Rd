% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treemapMonitoring.R
\name{treemapMonitoring}
\alias{treemapMonitoring}
\title{Treemap interactive plot.}
\usage{
treemapMonitoring(
  data,
  parentVar,
  parentLab = getLabelVar(parentVar, labelVars = labelVars),
  childVar,
  childLab = getLabelVar(childVar, labelVars = labelVars),
  valueVar,
  valueLab = getLabelVar(valueVar, labelVars = labelVars),
  titleExtra = NULL,
  title = paste(paste(valueLab, "by", paste(c(parentLab, childLab), collapse = " and "),
    titleExtra), collapse = "<br>"),
  labelVars = NULL,
  width = NULL,
  height = NULL,
  pathVar = NULL,
  pathLab = getLabelVar(pathVar, labelVars = labelVars),
  hoverVars,
  hoverLab,
  table = FALSE,
  tableVars,
  tableLab,
  tableButton = TRUE,
  tablePars = list(),
  id = paste0("plotMonitoring", sample.int(n = 1000, size = 1)),
  verbose = FALSE
)
}
\arguments{
\item{data}{Data.frame with data.}

\item{parentVar, parentLab}{String with variable of \code{data} containing parent nodes,
and associated label.}

\item{childVar, childLab}{String with variable of \code{data} containing child nodes,
and associated label.}

\item{valueVar, valueLab}{String with variable of \code{data} containing node value,
and associated label.}

\item{titleExtra}{String with extra title for the plot (appended after \code{title}).}

\item{title}{String with title for the plot.}

\item{labelVars}{Named character vector containing variable labels,
used by default for all labels in the plot.}

\item{width}{Width/height of the plot in pixels.}

\item{height}{Width/height of the plot in pixels.}

\item{pathVar}{String with variable of \code{data} containing hyperlinks 
with path to the subject-specific report, formatted as: \cr
\preformatted{<a href="./path-to-report">label</a>}.\cr 
If multiple, they should be separated by: ', '.\cr
The report(s) will be:
\itemize{
\item{compressed to a zip file and downloaded 
if the user clicks on the 'p' (a.k.a 'profile') key
when hovering on a point of the plot}
\item{included in a collapsible row, and clickable with hyperlinks
in the table}
}}

\item{pathLab}{String with label for \code{pathVar},
included in the collapsible row in the table.}

\item{hoverVars}{Character vector with variable(s) to be displayed in the hover,
by default any position and aesthetic variables displayed in the plot.}

\item{hoverLab}{Named character vector with labels for \code{hoverVars}.}

\item{table}{Logical, if TRUE (FALSE by default)
returns also a \code{datatable} containing the plot data.}

\item{tableVars}{Character vector with variables to be included 
in the table; and associated labels.}

\item{tableLab}{Character vector with variables to be included 
in the table; and associated labels.}

\item{tableButton}{Logical, if TRUE (by default)
the table is included within an HTML button.}

\item{tablePars}{List with parameters passed to the
\code{\link[glpgUtilityFct]{toDTGLPG}} function.}

\item{id}{String with general id for the plot:
\itemize{
\item{'id' is used as \code{group} for the \code{\link[crosstalk]{SharedData}}}
\item{'button:[id]' is used as button ID if \code{table} is TRUE}
}
If not specified, a random id, as 'plotMonitoring[X]' is used.}
}
\value{
If a \code{table} is requested:
\itemize{
\item{a list with the 'plot' (\code{\link[plotly]{plotly}} object) and 'table'
(\code{\link[DT]{datatable}} object with extra class: \code{medicalMonitoringTable})}
\item{\code{\link[plotly]{plotly}} object}
}
}
\description{
Note: the table and plot are not (yet) linked.
}
\examples{
library(glpgUtilityFct)

data(SDTMDataPelican)
data(labelVarsSDTMPelican)

dataAE <- SDTMDataPelican$AE
dataDM <- SDTMDataPelican$DM
labelVars <- labelVarsSDTMPelican

## example of basic treemap:

# treemap takes as input table with counts
library(inTextSummaryTable)

# total counts: Safety Analysis Set (patients with start date for the first treatment)
dataTotal <- subset(dataDM, RFXSTDTC != "")

# compute adverse event table
tableAE <- getSummaryStatisticsTable(
		
	data = dataAE,
	rowVar = c("AESOC", "AEDECOD"),
	dataTotal = dataTotal,
	rowOrder = "total",
	labelVars = labelVars,
	stats = getStats("count"),
	
	# plotly treemap requires records (rows) for each group
	rowVarTotalInclude = "AEDECOD",
	outputType = "data.frame"

)

dataPlot <- tableAE

dataPlot$n <- as.numeric(dataPlot$n)

# reformat summary statistics data.frame to link child <-> parent node
dataPlot['parent'] = with(dataPlot, 
	ifelse(AEDECOD == "Total", 'Adverse events', as.character(AESOC))
)
dataPlot['child'] = with(dataPlot, 
	ifelse(AEDECOD == "Total", as.character(AESOC), as.character(AEDECOD))
)

# create plot
treemapMonitoring(
	data = dataPlot,
	parentVar = "parent", parentLab = getLabelVar(var = "AESOC", labelVars = labelVars),
	childVar = "child", childLab = getLabelVar(var = "AEDECOD", labelVars = labelVars),
	valueVar = "n", valueLab = "Number of patients with adverse events"
)
}
\seealso{
Other visualizations of summary statistics for medical monitoring: 
\code{\link{barplotMonitoring}()},
\code{\link{sunburstMonitoring}()}
}
\author{
Laure Cougnaud
}
\concept{visualizations of summary statistics for medical monitoring}
